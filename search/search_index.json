{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyRE","text":""},{"location":"#overview","title":"Overview","text":"<p><code>pyre</code> goal is to provide pricing tools and utilities for reinsurnace users. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Pricing Calculations: Core functionality for actuarial pricing models.</li> <li>Data Processing: Tools for handling and transforming input data.</li> <li>Reporting: Generate reports and summaries for pricing results.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the package, clone the repository and install the dependencies:</p> <pre><code>git clone https://github.com/rdj09/pyre.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Here\u2019s a quick example of how to use the package:</p> <pre><code># Import the main module\nfrom pyre \n\n# Example usage\n\n</code></pre>"},{"location":"#directory-structure","title":"Directory Structure","text":""},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please follow these steps: 1. Fork the repository. 2. Create a new branch for your feature or bug fix. 3. Submit a pull request with a detailed description of your changes.</p>"},{"location":"#license","title":"License","text":"<p><code>pyre</code> is distributed under the terms of the MIT license.</p>"},{"location":"about/","title":"Boilerplate","text":""},{"location":"about/#reference","title":"Reference","text":"<p>summary</p> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>src\\pyre\\claims\\triangles.py</code> <pre><code>class TriangleExporter:\n    \"\"\"_summary_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    @staticmethod\n    def export_paid(aggregates: List[AggregateClaims], cumulative: bool = False) -&gt; pd.DataFrame:\n        \"\"\"_summary_\n\n        Args:\n            aggregates (List[AggregateClaims]): _description_\n            cumulative (bool, optional): _description_. Defaults to False.\n\n        Returns:\n            pd.DataFrame: _description_\n        \"\"\"\n        data: Dict[int, Dict[int, float]] = {}\n\n        for agg in aggregates:\n            for month, paid in enumerate(agg.dev_paid):\n                if month not in data:\n                    data[month] = {}\n\n                if cumulative:\n                    cumulative_paid = sum(agg.dev_paid[:month + 1])\n                    data[month][agg.year] = cumulative_paid\n                else:\n                    data[month][agg.year] = paid\n\n        triangle_df = pd.DataFrame(data).fillna(0)\n\n        triangle_df = triangle_df.sort_index(axis=0)\n\n        return triangle_df\n\n    @staticmethod\n    def export_incurred(aggregates: List[AggregateClaims], cumulative: bool = False) -&gt; pd.DataFrame:\n        \"\"\"_summary_\n\n        Args:\n            aggregates (List[AggregateClaims]): _description_\n            cumulative (bool, optional): _description_. Defaults to False.\n\n        Returns:\n            pd.DataFrame: _description_\n        \"\"\"\n        data: Dict[int, Dict[int, float]] = {}\n\n        for agg in aggregates:\n            for month, incurred in enumerate(agg.dev_incurred):\n                if month not in data:\n                    data[month] = {}\n\n                if cumulative:\n                    cumulative_incurred = sum(agg.dev_incurred[:month + 1])\n                    data[month][agg.year] = cumulative_incurred\n                else:\n                    data[month][agg.year] = incurred\n\n        triangle_df = pd.DataFrame(data).fillna(0)\n\n        triangle_df = triangle_df.sort_index(axis=0)\n\n        return triangle_df\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"about/#pyre.claims.triangles.TriangleExporter.export_incurred","title":"<code>export_incurred(aggregates, cumulative=False)</code>  <code>staticmethod</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>aggregates</code> <code>List[AggregateClaims]</code> <p>description</p> required <code>cumulative</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src\\pyre\\claims\\triangles.py</code> <pre><code>@staticmethod\ndef export_incurred(aggregates: List[AggregateClaims], cumulative: bool = False) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        aggregates (List[AggregateClaims]): _description_\n        cumulative (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    data: Dict[int, Dict[int, float]] = {}\n\n    for agg in aggregates:\n        for month, incurred in enumerate(agg.dev_incurred):\n            if month not in data:\n                data[month] = {}\n\n            if cumulative:\n                cumulative_incurred = sum(agg.dev_incurred[:month + 1])\n                data[month][agg.year] = cumulative_incurred\n            else:\n                data[month][agg.year] = incurred\n\n    triangle_df = pd.DataFrame(data).fillna(0)\n\n    triangle_df = triangle_df.sort_index(axis=0)\n\n    return triangle_df\n</code></pre>"},{"location":"about/#pyre.claims.triangles.TriangleExporter.export_paid","title":"<code>export_paid(aggregates, cumulative=False)</code>  <code>staticmethod</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>aggregates</code> <code>List[AggregateClaims]</code> <p>description</p> required <code>cumulative</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src\\pyre\\claims\\triangles.py</code> <pre><code>@staticmethod\ndef export_paid(aggregates: List[AggregateClaims], cumulative: bool = False) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        aggregates (List[AggregateClaims]): _description_\n        cumulative (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    data: Dict[int, Dict[int, float]] = {}\n\n    for agg in aggregates:\n        for month, paid in enumerate(agg.dev_paid):\n            if month not in data:\n                data[month] = {}\n\n            if cumulative:\n                cumulative_paid = sum(agg.dev_paid[:month + 1])\n                data[month][agg.year] = cumulative_paid\n            else:\n                data[month][agg.year] = paid\n\n    triangle_df = pd.DataFrame(data).fillna(0)\n\n    triangle_df = triangle_df.sort_index(axis=0)\n\n    return triangle_df\n</code></pre>"},{"location":"about/#armis-nymphae","title":"Armis nymphae","text":"<p>Lorem markdownum canis, qui te Quirine Labros is inops partes et indomito tereti locutum, detur! Unum est coirent saucia suos vento! Inque pontusque sucus trepidantum quae, attonitamque quae tantum et sanguine temptasse Caenis ornant, pressus. Manus inspicitur quod!</p> <p>Et audeat mirabere cupiasque insidias tegit: pepulere videt. Summo tepido exhortantur lupo.</p> <ol> <li>Pontus frustra quidem</li> <li>Illi clarus tamen nescis agitavit</li> <li>Inachis crepitantibus draconi deficiunt poteram</li> <li>Usque relictum urbem hac prudentia</li> <li>Si quae quondam altera</li> </ol>"},{"location":"about/#meis-est-labefactaque-relicta-mihi-quamvis-est","title":"Meis est labefactaque relicta mihi quamvis est","text":"<p>Matre sub habenas everberat Ulixem mitescere iam genus: Echion obprobrium quod, busta contigerant fortius. Belli velavit eruerit equorum tecta sitim pariterque virgo, pavefactaque viderat qua habet, transferre intus, Iri suos ferrumque. Refers corripit moris ne tamen anni unda aura adversos vires. Nec novae volucres premeret et delet trepidos annum. Flore cum ut gravitate duarum memorant sparsus si multum iubasque stratosque nervis annosa?</p> <p>Ipse fatali, quatiens, o proditione mutum, clausit annum cum postquam suam dubium. Perque tu nullos moveo; exacta spumantis quemquam, explevit, tamen caelo sola splendida.</p>"}]}