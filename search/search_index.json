{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyRE","text":""},{"location":"#overview","title":"Overview","text":"<p><code>pyre</code> goal is to provide pricing tools and utilities for reinsurnace users. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Pricing Calculations: Core functionality for actuarial pricing models.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the package, clone the repository and install the dependencies:</p> <pre><code>git clone https://github.com/rdj09/pyre.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Here\u2019s a quick example of how to use the package:</p> <pre><code># Import the main module\nfrom pyre \n\n# Example usage\n\n</code></pre>"},{"location":"#directory-structure","title":"Directory Structure","text":""},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please follow these steps: 1. Fork the repository. 2. Create a new branch for your feature or bug fix. 3. Submit a pull request with a detailed description of your changes.</p>"},{"location":"#license","title":"License","text":"<p><code>pyre</code> is distributed under the terms of the MIT license.</p>"},{"location":"about/","title":"Boilerplate","text":""},{"location":"about/#reference","title":"Reference","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"about/#pyre.claims.claims.Claim","title":"<code>Claim</code>","text":"<p>Represents an insurance claim with associated metadata and development history,  providing access to both capped and uncapped claim development values. Attributes:     _claims_meta_data (ClaimsMetaData): Metadata describing the claim, including deductible and limit information.     _claim_development_history (ClaimDevelopmentHistory): The development history of the claim, including paid and incurred amounts over time. Properties:     claims_meta_data: Returns the claim's metadata.     uncapped_claim_development_history (ClaimDevelopmentHistory): Returns the claim development history after adjusting for deductible, but before applying the contract limit.     capped_claim_development_history (ClaimDevelopmentHistory): Returns the claim development history after applying both deductible and contract limit. Methods:     repr(): Returns a string representation of the claim, including claim ID, modelling year, latest incurred, and latest capped incurred values. Note:     The class assumes the existence of ClaimsMetaData and ClaimDevelopmentHistory classes with appropriate attributes and methods.</p> Source code in <code>src\\pyre\\claims\\claims.py</code> <pre><code>class Claim:\n    \"\"\"\n    Represents an insurance claim with associated metadata and development history, \n    providing access to both capped and uncapped claim development values.\n    Attributes:\n        _claims_meta_data (ClaimsMetaData): Metadata describing the claim, including deductible and limit information.\n        _claim_development_history (ClaimDevelopmentHistory): The development history of the claim, including paid and incurred amounts over time.\n    Properties:\n        claims_meta_data: Returns the claim's metadata.\n        uncapped_claim_development_history (ClaimDevelopmentHistory): Returns the claim development history after adjusting for deductible, but before applying the contract limit.\n        capped_claim_development_history (ClaimDevelopmentHistory): Returns the claim development history after applying both deductible and contract limit.\n    Methods:\n        __repr__(): Returns a string representation of the claim, including claim ID, modelling year, latest incurred, and latest capped incurred values.\n    Note:\n        The class assumes the existence of ClaimsMetaData and ClaimDevelopmentHistory classes with appropriate attributes and methods.\n    \"\"\"\n\n    def __init__(self, claims_meta_data: ClaimsMetaData, claims_development_history: ClaimDevelopmentHistory) -&gt; None:\n        self._claims_meta_data = claims_meta_data\n        self._claim_development_history = claims_development_history\n\n    @property\n    def claims_meta_data(self):\n        return self._claims_meta_data\n\n    @property\n    def uncapped_claim_development_history(self) -&gt; ClaimDevelopmentHistory:\n        if self._claims_meta_data.claim_in_xs_of_deductible:\n            uncapped_paid = self._claim_development_history.cumulative_dev_paid\n            uncapped_incurred = self._claim_development_history.cumulative_dev_incurred\n        else:\n            uncapped_paid = [max(paid - self._claims_meta_data.contract_deductible, 0.0) for paid in self._claim_development_history.cumulative_dev_paid]\n            uncapped_incurred = [max(incurred - self._claims_meta_data.contract_deductible, 0.0) for incurred in self._claim_development_history.cumulative_dev_incurred]\n        self._uncapped_claim_development_history = ClaimDevelopmentHistory(self._claim_development_history.development_months, uncapped_paid, uncapped_incurred)\n        return self._uncapped_claim_development_history\n\n    @property\n    def capped_claim_development_history(self) -&gt; ClaimDevelopmentHistory:\n        capped_paid = [min(paid, self._claims_meta_data.contract_limit) for paid in self.uncapped_claim_development_history.cumulative_dev_paid]\n        capped_incurred = [min(incurred, self._claims_meta_data.contract_limit) for incurred in self.uncapped_claim_development_history.cumulative_dev_incurred]\n        self._capped_claim_development_history = ClaimDevelopmentHistory(self._claim_development_history.development_months, capped_paid, capped_incurred)\n        return self._capped_claim_development_history \n\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"claim_id={self._claims_meta_data.claim_id},modelling_year={self._claims_meta_data.modelling_year},latest_incurred={self._claim_development_history.latest_incurred},latest_capped_incurred={self.capped_claim_development_history.latest_incurred}\"\n        )\n</code></pre>"},{"location":"about/#pyre.claims.claims.ClaimDevelopmentHistory","title":"<code>ClaimDevelopmentHistory</code>  <code>dataclass</code>","text":"<p>Represents the development history of an insurance claim, tracking cumulative and incremental paid and incurred amounts over development months. Attributes:     development_months (Sequence[int]): The sequence of development months for the claim.     cumulative_dev_paid (Sequence[float]): The cumulative paid amounts at each development month.     cumulative_dev_incurred (Sequence[float]): The cumulative incurred amounts at each development month. Properties:     cumulative_reserved_amount (list[float]): The list of reserved amounts (incurred minus paid) at each development month.     latest_paid (float): The latest cumulative paid amount, or 0.0 if no data.     latest_incurred (float): The latest cumulative incurred amount, or 0.0 if no data.     latest_reserved_amount (float): The latest reserved amount (incurred minus paid), or 0.0 if no data.     latest_development_month (int): The latest development month, or 0 if no data.     incremental_dev_incurred (List[float]): The incremental incurred amounts at each development month.     incremental_dev_paid (List[float]): The incremental paid amounts at each development month.     mean_payment_duration (Optional[float]): The mean payment duration, calculated as the time-weighted average of incremental paid amounts, or None if no payments. Methods:     incremental_dev(cumulative_dev: Sequence[float]) -&gt; List[float]:         Computes the incremental development amounts from a sequence of cumulative values. Raises:     ValueError: If the lengths of cumulative_dev_incurred and cumulative_dev_paid do not match when calculating reserved amounts.</p> Source code in <code>src\\pyre\\claims\\claims.py</code> <pre><code>@dataclass\nclass ClaimDevelopmentHistory:\n    \"\"\"\n    Represents the development history of an insurance claim, tracking cumulative and incremental paid and incurred amounts over development months.\n    Attributes:\n        development_months (Sequence[int]): The sequence of development months for the claim.\n        cumulative_dev_paid (Sequence[float]): The cumulative paid amounts at each development month.\n        cumulative_dev_incurred (Sequence[float]): The cumulative incurred amounts at each development month.\n    Properties:\n        cumulative_reserved_amount (list[float]): The list of reserved amounts (incurred minus paid) at each development month.\n        latest_paid (float): The latest cumulative paid amount, or 0.0 if no data.\n        latest_incurred (float): The latest cumulative incurred amount, or 0.0 if no data.\n        latest_reserved_amount (float): The latest reserved amount (incurred minus paid), or 0.0 if no data.\n        latest_development_month (int): The latest development month, or 0 if no data.\n        incremental_dev_incurred (List[float]): The incremental incurred amounts at each development month.\n        incremental_dev_paid (List[float]): The incremental paid amounts at each development month.\n        mean_payment_duration (Optional[float]): The mean payment duration, calculated as the time-weighted average of incremental paid amounts, or None if no payments.\n    Methods:\n        incremental_dev(cumulative_dev: Sequence[float]) -&gt; List[float]:\n            Computes the incremental development amounts from a sequence of cumulative values.\n    Raises:\n        ValueError: If the lengths of cumulative_dev_incurred and cumulative_dev_paid do not match when calculating reserved amounts.\n    \"\"\"\n\n    development_months: Sequence[int] = field(default_factory=list)\n    cumulative_dev_paid: Sequence[float] = field(default_factory=list)\n    cumulative_dev_incurred: Sequence[float] = field(default_factory=list)\n\n    @property\n    def cumulative_reserved_amount(self) -&gt; list[float]:\n        if len(self.cumulative_dev_incurred) != len(self.cumulative_dev_paid):\n            raise ValueError(\"Both lists must have the same length.\")\n        return [incurred - paid for incurred, paid in zip(self.cumulative_dev_incurred, self.cumulative_dev_paid)]\n\n    @property\n    def latest_paid(self) -&gt; float:\n        return self.cumulative_dev_paid[-1] if self.cumulative_dev_paid else 0.0\n\n    @property\n    def latest_incurred(self) -&gt; float:\n        return self.cumulative_dev_incurred[-1] if self.cumulative_dev_incurred else 0.0\n\n    @property\n    def latest_reserved_amount(self) -&gt; float:\n        return self.cumulative_dev_incurred[-1] - self.cumulative_dev_paid[-1] if self.cumulative_dev_paid else 0.0\n\n    @property\n    def latest_development_month(self) -&gt; int:\n        return self.development_months[-1] if self.development_months else 0\n\n    @staticmethod\n    def incremental_dev(cumulative_dev: Sequence[float]) -&gt; List[float]:\n        incremental_dev = [cumulative_dev[0]]\n        incremental_dev.extend([cumulative_dev[i] - cumulative_dev[i - 1] for i in range(1, len(cumulative_dev))])\n        return incremental_dev\n    @property\n    def incremental_dev_incurred(self) -&gt; List[float]:\n        self.incremental_dev(self.cumulative_dev_incurred)\n        return self.incremental_dev(self.cumulative_dev_incurred)\n\n    @property #\n    def incremental_dev_paid(self) -&gt; List[float]:\n        self.incremental_dev(self.cumulative_dev_paid)\n        return self.incremental_dev(self.cumulative_dev_paid)\n\n    @property\n    def mean_payment_duration(self) -&gt; Optional[float]:\n        if self.latest_paid &gt; 0:\n            time_weighted_payments = sum(month * paid for month, paid in zip(self.development_months, self.incremental_dev_paid))\n            return time_weighted_payments / self.latest_paid\n        return None\n</code></pre>"},{"location":"about/#pyre.claims.claims.ClaimYearType","title":"<code>ClaimYearType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of possible claim year bases used for actuarial analysis. Attributes:     ACCIDENT_YEAR: The year in which the loss event occurred.     UNDERWRITING_YEAR: The year in which the insurance policy incepted.     REPORTED_YEAR: The year in which the claim was reported.</p> Source code in <code>src\\pyre\\claims\\claims.py</code> <pre><code>class ClaimYearType(Enum):\n    \"\"\"\n    Enumeration of possible claim year bases used for actuarial analysis.\n    Attributes:\n        ACCIDENT_YEAR: The year in which the loss event occurred.\n        UNDERWRITING_YEAR: The year in which the insurance policy incepted.\n        REPORTED_YEAR: The year in which the claim was reported.\n    \"\"\"\n    ACCIDENT_YEAR = auto()\n    UNDERWRITING_YEAR = auto()\n    REPORTED_YEAR = auto()\n</code></pre>"},{"location":"about/#pyre.claims.claims.Claims","title":"<code>Claims</code>","text":"<p>A container class for managing a collection of Claim objects. The Claims class provides convenient accessors and utilities for handling multiple Claim instances, including properties for extracting modelling years, development periods, and currencies from the underlying claims. It also supports list-like behaviors such as indexing, slicing, appending, and iteration. Attributes:     claims (list[Claim]): The list of Claim objects managed by this container. Properties:     modelling_years (List): Sorted list of unique modelling years across all claims.     development_periods (List): Sorted list of unique development periods across all claims.     currencies (Set): Set of unique currencies across all claims. Methods:     append(claim: Claim): Appends a Claim object to the collection.     getitem(key): Supports indexing and slicing to access claims.     iter(): Returns an iterator over the claims.     len(): Returns the number of claims in the collection.</p> Source code in <code>src\\pyre\\claims\\claims.py</code> <pre><code>class Claims:\n    \"\"\"\n    A container class for managing a collection of Claim objects.\n    The Claims class provides convenient accessors and utilities for handling\n    multiple Claim instances, including properties for extracting modelling years,\n    development periods, and currencies from the underlying claims. It also\n    supports list-like behaviors such as indexing, slicing, appending, and iteration.\n    Attributes:\n        claims (list[Claim]): The list of Claim objects managed by this container.\n    Properties:\n        modelling_years (List): Sorted list of unique modelling years across all claims.\n        development_periods (List): Sorted list of unique development periods across all claims.\n        currencies (Set): Set of unique currencies across all claims.\n    Methods:\n        append(claim: Claim): Appends a Claim object to the collection.\n        __getitem__(key): Supports indexing and slicing to access claims.\n        __iter__(): Returns an iterator over the claims.\n        __len__(): Returns the number of claims in the collection.\n    \"\"\"\n\n    def __init__(self, claims: list[Claim]) -&gt; None:\n        self._claims = claims\n\n    @property\n    def claims(self):\n        return self._claims\n\n    @claims.setter\n    def claims(self, list_of_claim_classes:list[Claim]):\n        self._claims = list_of_claim_classes\n\n    @property\n    def modelling_years(self) -&gt; List:\n        \"\"\"\n        Returns a list of modelling years for all claims.\n        \"\"\"\n        years = {claim.claims_meta_data.modelling_year for claim in self.claims}\n        return sorted(years)\n\n    @property\n    def development_periods(self) -&gt; List:\n        \"\"\"\n        Returns a list of modelling years for all claims.\n        \"\"\"\n        dev_periods = {claim.capped_claim_development_history.development_months for claim in self.claims}\n        return sorted(dev_periods)\n\n    @property\n    def currencies(self) -&gt; Set:\n        \"\"\"\n        Returns a list of currencies for all claims.\n        \"\"\"\n        return {claim.claims_meta_data.currency for claim in self.claims}\n\n    def append(self, claim: Claim):\n        self._claims.append(claim)\n\n    def __getitem__(self, key):\n        if isinstance(key,slice):\n            cls = type(self)\n            return cls(self._claims[key])\n        index = operator.index(key)\n        return self._claims[index]\n\n    def __iter__(self):\n        return iter(self._claims)\n\n    def __len__(self):\n        return len(self._claims)\n</code></pre>"},{"location":"about/#pyre.claims.claims.Claims.currencies","title":"<code>currencies</code>  <code>property</code>","text":"<p>Returns a list of currencies for all claims.</p>"},{"location":"about/#pyre.claims.claims.Claims.development_periods","title":"<code>development_periods</code>  <code>property</code>","text":"<p>Returns a list of modelling years for all claims.</p>"},{"location":"about/#pyre.claims.claims.Claims.modelling_years","title":"<code>modelling_years</code>  <code>property</code>","text":"<p>Returns a list of modelling years for all claims.</p>"},{"location":"about/#pyre.claims.claims.ClaimsMetaData","title":"<code>ClaimsMetaData</code>  <code>dataclass</code>","text":"<p>Represents metadata for an insurance claim, including key attributes such as claim ID, currency, contract terms, relevant dates, and status. Attributes:     claim_id (str): Unique identifier for the claim.     currency (str): Currency code for the claim amounts.     contract_limit (float): Maximum limit of the insurance contract. Defaults to 0.0.     contract_deductible (float): Deductible amount for the contract. Defaults to 0.0.     claim_in_xs_of_deductible (bool): Indicates if the claim is in excess of the deductible. Defaults to False.     claim_year_basis (ClaimYearType): Basis for determining the claim year (e.g., accident, underwriting, or reported year).     loss_date (date): Date of loss occurrence. Defaults to January 1, 1900.     policy_inception_date (date): Policy inception date. Defaults to January 1, 1900.     report_date (date): Date the claim was reported. Defaults to January 1, 1900.     line_of_business (Optional[str]): Line of business associated with the claim. Defaults to None.     status (Optional[str]): Status of the claim (e.g., \"Open\", \"Closed\"). Defaults to \"Open\". Properties:     modelling_year (int | ClaimsException): Returns the modelling year based on the claim_year_basis, or raises a ClaimsException if the required date is missing.</p> Source code in <code>src\\pyre\\claims\\claims.py</code> <pre><code>@dataclass\nclass ClaimsMetaData:\n    \"\"\"\n    Represents metadata for an insurance claim, including key attributes such as claim ID, currency, contract terms, relevant dates, and status.\n    Attributes:\n        claim_id (str): Unique identifier for the claim.\n        currency (str): Currency code for the claim amounts.\n        contract_limit (float): Maximum limit of the insurance contract. Defaults to 0.0.\n        contract_deductible (float): Deductible amount for the contract. Defaults to 0.0.\n        claim_in_xs_of_deductible (bool): Indicates if the claim is in excess of the deductible. Defaults to False.\n        claim_year_basis (ClaimYearType): Basis for determining the claim year (e.g., accident, underwriting, or reported year).\n        loss_date (date): Date of loss occurrence. Defaults to January 1, 1900.\n        policy_inception_date (date): Policy inception date. Defaults to January 1, 1900.\n        report_date (date): Date the claim was reported. Defaults to January 1, 1900.\n        line_of_business (Optional[str]): Line of business associated with the claim. Defaults to None.\n        status (Optional[str]): Status of the claim (e.g., \"Open\", \"Closed\"). Defaults to \"Open\".\n    Properties:\n        modelling_year (int | ClaimsException): Returns the modelling year based on the claim_year_basis, or raises a ClaimsException if the required date is missing.\n    \"\"\"\n\n    claim_id: str\n    currency: str\n    contract_limit: float = 0.0\n    contract_deductible: float = 0.0\n    claim_in_xs_of_deductible: bool = False\n    claim_year_basis: ClaimYearType = ClaimYearType.ACCIDENT_YEAR\n    loss_date: date = date(day=1,month=1,year= 1900)\n    policy_inception_date: date = date(day=1,month=1,year= 1900)\n    report_date: date = date(day=1,month=1,year= 1900)\n    line_of_business: Optional[str] = None\n    status: Optional[str] = \"Open\"\n\n    @property\n    def modelling_year (self) -&gt; ClaimsException | int:\n        _modeling_basis_years={\n            ClaimYearType.ACCIDENT_YEAR: self.loss_date.year,\n            ClaimYearType.UNDERWRITING_YEAR: self.policy_inception_date.year,\n            ClaimYearType.REPORTED_YEAR: self.report_date.year\n        }\n        if self.claim_year_basis in _modeling_basis_years:\n            return _modeling_basis_years[self.claim_year_basis]\n        else: \n            return ClaimsException(\n                claim_id=self.claim_id, \n                message=\"Required date missing from data\"\n                )\n</code></pre>"},{"location":"about/#armis-nymphae","title":"Armis nymphae","text":"<p>Lorem markdownum canis, qui te Quirine Labros is inops partes et indomito tereti locutum, detur! Unum est coirent saucia suos vento! Inque pontusque sucus trepidantum quae, attonitamque quae tantum et sanguine temptasse Caenis ornant, pressus. Manus inspicitur quod!</p> <p>Et audeat mirabere cupiasque insidias tegit: pepulere videt. Summo tepido exhortantur lupo.</p> <ol> <li>Pontus frustra quidem</li> <li>Illi clarus tamen nescis agitavit</li> <li>Inachis crepitantibus draconi deficiunt poteram</li> <li>Usque relictum urbem hac prudentia</li> <li>Si quae quondam altera</li> </ol>"},{"location":"about/#meis-est-labefactaque-relicta-mihi-quamvis-est","title":"Meis est labefactaque relicta mihi quamvis est","text":"<p>Matre sub habenas everberat Ulixem mitescere iam genus: Echion obprobrium quod, busta contigerant fortius. Belli velavit eruerit equorum tecta sitim pariterque virgo, pavefactaque viderat qua habet, transferre intus, Iri suos ferrumque. Refers corripit moris ne tamen anni unda aura adversos vires. Nec novae volucres premeret et delet trepidos annum. Flore cum ut gravitate duarum memorant sparsus si multum iubasque stratosque nervis annosa?</p> <p>Ipse fatali, quatiens, o proditione mutum, clausit annum cum postquam suam dubium. Perque tu nullos moveo; exacta spumantis quemquam, explevit, tamen caelo sola splendida.</p>"}]}